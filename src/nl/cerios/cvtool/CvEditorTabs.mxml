<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:cveditor="nl.cerios.cvtool.cveditor.*"
		 creationComplete="init()" enabled="{signedInAccountXml != null}">
	
	<fx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			
			import nl.bransom.BrowserUtils;
			import nl.bransom.ChainableTask;
			import nl.bransom.PersistencyStatus;
			import nl.bransom.RemoteInvokerHttp;
			import nl.bransom.XmlUtils;
			import nl.bransom.gui.Utils;
			import nl.bransom.rest.RestClient;

			[Bindable] public var restClient:RestClient;
			[Bindable] public var signedInAccountXml:XML;
			
			[Bindable] private var cvXml:XML;
			[Bindable] private var persoonsgegevensXml:XML;
			
			private function init():void {
				BindingUtils.bindSetter(setSignedInAccountXml, this, "signedInAccountXml");
			}
			private function setSignedInAccountXml(xml:XML):void {
				if (xml == null) {
					setCvAccountXml(null);
				} else {
					restClient.read("CV_ACCOUNT", "_account/" + signedInAccountXml.@id, null, setCvAccountXml);
				}
			}
			private function setCvAccountXml(cvAccountXml:XML):void {
				if (cvAccountXml == null) {
					cvXml = null;
					persoonsgegevensXml = null;
				} else {
					cvXml = XmlUtils.getElements(cvAccountXml, "cv")[0];
					// Create a new nodes if required.
					if (cvXml == null) {
						cvXml = restClient.createEntityNode(cvAccountXml, "cv");
					}
					persoonsgegevensXml = XmlUtils.getElements(cvXml, "persoonsgegevens")[0];
					if (persoonsgegevensXml == null) {
						persoonsgegevensXml = restClient.createEntityNode(cvXml, "persoonsgegevens");
					}
				}
			}
			
			private function getInfoHtml(signedInAccountXml:XML):String {
				const listItem:String = "\n\n&nbsp;&nbsp;&nbsp;&nbsp;â–ª ";
				const listLine:String = "\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
				return "Welkom " + XmlUtils.getTextContent(signedInAccountXml, "name").replace(/\..*/g, '')
					+ "\n\nDit is versie " + CVtool.APP_VERSION + " van de <b>Valori CVtool</b>, waarmee je je curriculum vitae zowel in het Nederlands als in het Engels kunt invoeren."
					+ "\nLet even op het volgende:"
					+ listItem + "<i>AutoSave</i>: al je wijzigingen worden na twee seconden vanzelf opgeslagen."
					+ listLine + "Als je niet van plan bent iets te wijzigen, zet 'AutoSave' dan uit met de knop rechtsonder."
					+ listItem + "<i>Publiceren</i> plaatst je cv in de <a target='blank' href='https://valorinl.sharepoint.com/sites/Kantoor/CV_databank'><u>CV Databank in SharePoint</u></a>."
					+ listItem + "<i>Sorteren</i>: gegevens in tabellen kun je sorteren door op de kolomheader te klikken."
					+ listLine + "Het sorteren van tabelgegevens heeft geen invloed op de volgorde in je cv, behalve bij <i>Werkopdrachten</i>."
					+ listLine + "Die zijn standaard gesorteerd op einddatum, maar dat kun je met drag&drop aanpassen."
					+ listLine + "Dat kan handig zijn als je meerdere opdrachten tegelijk hebt."
					+ listItem + "<i>Markdown lijst</i>: In veel tekstvelden kun je een opsomming maken door regels te laten beginnen met '<b>* </b>' (sterretje + spatie)."
					+ listLine + "Dit wordt in het Word document omgezet naar een lijst met 'Valori bullets'."
					+ "\n\nIk heb geprobeerd alles zo gebruiksvriendelijk mogelijk te maken, maar tips en (positieve ;-) kritiek zijn altijd welkom."
					+ "\nProblemen? Een bug ontdekt? Stuur even een mailtje naar "
					+ "<a target='blank' href='mailto:RobBosman@valori.nl?subject=CVtool'><u>RobBosman@valori.nl</u></a>."
					+ "\n\nEnjoy!\nRob";
			}
			
			public static function previewCv(restClient:RestClient, accountId:String, locale:String,
											 layout:String, saveChangesFirst:Boolean):void {
				var urlRequest:URLRequest = new URLRequest("generateCvDocx.php");
				urlRequest.method = URLRequestMethod.POST;
				urlRequest.data = "restTarget=" + CVtool.REST_APP + "/_account/" + accountId
					+ "&locale=" + locale
					+ "&layout=" + layout
					+ "&jwt=" + restClient.jwt;
				
				// Create a chainable task for requesting the preview.
				var requestPreviewTask:ChainableTask = new ChainableTask();
				requestPreviewTask.oneArgChainableMethod = previewCvChainableMethod;
				requestPreviewTask.argument = urlRequest;
				
				if (saveChangesFirst) {
					// Save any changes before requesting the preview.
					restClient.save(null, requestPreviewTask);
				} else {
					requestPreviewTask.execute();
				}
			}
			
			private static function previewCvChainableMethod(urlRequest:URLRequest, nextTask:ChainableTask = null):void {
				navigateToURL(urlRequest, "_self");
			}

			private function publish():void {
				// Perform the following steps:
				// 1. save any changes to the REST server
				// 2. publish the document in SharePoint
				// 3. publish the stored data on the REST server
				// 4. mark the REST data as 'published'

				// Create the last chain element.
				// Step 4 will be done automatically by the REST client.
				// Step 3: publish the stored data on the REST server.
				var publishRestTask:ChainableTask = new ChainableTask();
				publishRestTask.oneArgChainableMethod = restClient.publish;
				publishRestTask.argument = cvXml;
				// Step 2: publish the latest version in SharePoint.
				var publishInSharePointTask:ChainableTask = new ChainableTask();
				publishInSharePointTask.oneArgChainableMethod = publishInSharePoint;
				publishInSharePointTask.nextTask = publishRestTask;
				// Execute the chain.
				// Step 1: save any changed data.
				restClient.save(null, publishInSharePointTask);
			}
			
			// Send a publish-in-SharePoint-request to the REST server.
			private function publishInSharePoint(dummy:* = null, nextTask:ChainableTask = null):void {
				// Compose the document name...
				var locale:String = CVtool.selectedLocaleInfo.locale;
				var docName:String = "CV_" + locale.substr(3) + "_"
						+ XmlUtils.getTextContent(persoonsgegevensXml, "voornaam")
						+ XmlUtils.getTextContent(persoonsgegevensXml, "tussenvoegsel")
						+ XmlUtils.getTextContent(persoonsgegevensXml, "achternaam");
				// ...and publish it in SharePoint.
				var url:String = "publishToSharePoint.php";
				var formData:String = "restTarget=" + CVtool.REST_APP + "/_account/" + signedInAccountXml.@id
					+ "&documentName=" + encodeURIComponent(docName)
					+ "&locale=" + locale
					+ "&layout=" + "Valori";
				
				// Request the REST server to publish the data.
				var remoteInvoker:RemoteInvokerHttp = new RemoteInvokerHttp();
				remoteInvoker.authorizationHeader = restClient.getHttpAuthorizationHeader();
				remoteInvoker.method = URLRequestMethod.POST;
				remoteInvoker.requestFormData = formData;
				remoteInvoker.url = url;
				remoteInvoker.errorCallback = publishErrorCallback;
				remoteInvoker.okCallback = publishOkCallback;
				remoteInvoker.context.nextTask = nextTask;
				remoteInvoker.send();
				
				restClient.status = PersistencyStatus.PUBLISHING;
			}
			private function publishErrorCallback(remoteInvoker:RemoteInvokerHttp):void {
				restClient.errorHtmlText = remoteInvoker.getErrorResponseHtml();
				restClient.status = PersistencyStatus.UNCHANGED;
			}
			private function publishOkCallback(remoteInvoker:RemoteInvokerHttp):void {
				Utils.alert(remoteInvoker.getResponseText(), "INFO");
				restClient.status = PersistencyStatus.UNCHANGED;
				// Continue with any follow-up task.
				var context:Object = remoteInvoker.context;
				if (context.nextTask != null) {
					context.nextTask.execute();
				}
			}
		]]>
	</fx:Script>

	<mx:TabNavigator width="100%" height="100%" styleName="main-container">
		<mx:Canvas width="100%" height="100%" label="Info">
			<mx:TextArea width="100%" height="100%" editable="false"
						 htmlText="{getInfoHtml(signedInAccountXml)}" styleName="info"/>
		</mx:Canvas>
		<cveditor:PersoonsgegevensTab label="Persoonsgegevens" objectXml="{persoonsgegevensXml}"
									  restClient="{restClient}"/>
		<cveditor:FotoTab label="Foto" objectXml="{persoonsgegevensXml}" restClient="{restClient}"/>
		<cveditor:ProfielTab label="Profiel" cvXml="{cvXml}" objectName="profiel"
							 restClient="{restClient}"/>
		<cveditor:OpleidingTab label="Opleiding" objectName="opleiding" parentXml="{cvXml}"
							   restClient="{restClient}"/>
		<cveditor:TalenkennisTab label="Talen" objectName="talenkennis" parentXml="{cvXml}"
								 restClient="{restClient}"/>
		<cveditor:BranchekennisTab label="Branche" objectName="branchekennis" parentXml="{cvXml}"
								   restClient="{restClient}"/>
		<cveditor:VaardighedenTab label="Vaardigheden" objectName="vaardigheid" parentXml="{cvXml}"
								  restClient="{restClient}"/>
		<cveditor:PublicatiesTab label="Publicaties" objectName="publicatie" parentXml="{cvXml}"
								 restClient="{restClient}"/>
		<cveditor:ReferentiesTab label="Referenties" objectName="referentie" parentXml="{cvXml}"
								 restClient="{restClient}"/>
		<cveditor:WerkopdrachtenTab label="Werkervaring" objectName="werkopdracht"
									parentXml="{cvXml}" restClient="{restClient}"/>
	</mx:TabNavigator>
	<mx:HBox width="100%" verticalAlign="middle">
		<mx:Button label="Preview"
				   click="previewCv(restClient, signedInAccountXml.@id, CVtool.selectedLocaleInfo.locale, 'Valori', true)"
				   enabled="{cvXml != null}" icon="{CVtool.selectedLocaleInfo.icon}"
				   labelPlacement="left"/>
		<mx:Spacer width="100%"/>
		<mx:Label styleName="{(cvXml.@published == 'true') ? 'published' : 'unpublished'}"
				  text="{(cvXml.@published == 'true') ? 'Deze gegevens zijn gepubliceerd.' : 'De wijzigingen zijn nog niet gepubliceerd.'}"/>
		<mx:Button label="Publiceren" click="publish()" enabled="{cvXml != null}"/>
	</mx:HBox>
</mx:VBox>
